#!/usr/bin/perl -w
# -*-cperl-*-

# $Id$
# $URL$

use strict;

my $WD = `pwd`;
chomp $WD;
my $TMP_DIR = ($ENV{'LIMESTONE_TMP_DIR'} or $WD."/tmp");
my $FILES_DIR = ($ENV{'LIMESTONE_FILES_DIR'} or $WD."/files");
my $LOGS_DIR = ($ENV{'LIMESTONE_LOGS_DIR'} or $WD."/aproot/logs"); 
my $NON_VHOST_CONF_DIR_RELATIVE = "conf/lime-nonvhost";
my $VHOST_CONF_DIR_RELATIVE = "conf/lime-vhost";
my $NON_VHOST_CONF_DIR = "${WD}/aproot/${NON_VHOST_CONF_DIR_RELATIVE}";
my $VHOST_CONF_DIR = "${WD}/aproot/${VHOST_CONF_DIR_RELATIVE}";
my $ORIG_HTTPD_CONFIG = "aproot/conf/original/httpd.conf";
my $HTTPD_CONFIG = "aproot/conf/httpd.conf";
my $NEW_HTTPD_CONFIG = "aproot/conf/httpd.conf.new";
my $LIMESTONE_CONFIG = "${NON_VHOST_CONF_DIR}/001-limestone.conf";
my $LOGROTATE_CONFIG = "logrotate.conf";
my $LOGROTATE_CONFIG_NEW = "logrotate.conf.new";

my ($CONF_PGSQL_VHOST, $CONF_MYSQL_VHOST) = ("no", "no");

my $listen_address =
  exists($ENV{'LIMESTONE_LISTEN_IP'}) ?
  ($ENV{'LIMESTONE_LISTEN_IP'} . ':') : '';

# make directories
my @dirs2create = ($TMP_DIR, $FILES_DIR, $NON_VHOST_CONF_DIR, $VHOST_CONF_DIR);
my $dir2create;

foreach $dir2create (@dirs2create) {
  -d $dir2create or mkdir($dir2create) or die ("couldn't make $dir2create");
}

sub print_limestone_config ($$$$$$$$$) {
  my ($config_fh, $vhost_port, $db_driver, $db_host,
      $db_port, $db_sock, $db_name, $db_user, $db_pass) = @_;

  my $ROOT_PATH = "/";

  my $host_domain = $ENV{'LIMESTONE_HOST_DOMAIN'};
  my $port_part_of_host;
  if ($vhost_port) {
    $port_part_of_host = ":${vhost_port}";
  } else {
    $port_part_of_host = "";
    $vhost_port = 80;
  }


  print $config_fh qq/DBDriver $db_driver\n/;
  if ($db_driver eq "pgsql") {
    print $config_fh qq/DBDParams "host=$db_host /;
    print $config_fh qq/port=$db_port / if $db_port;
    print $config_fh qq/dbname=$db_name user=$db_user password=$db_pass"\n/;
  } elsif ($db_driver eq "mysql") {
    print $config_fh qq/  DBDParams "/;
    if ($db_sock) {
      print $config_fh "sock=$db_sock ";
    } else {
      print $config_fh "host=$db_host ";
      print $config_fh "port=$db_port " if $db_port;
    }
    print $config_fh qq/dbname=$db_name user=$db_user pass=$db_pass"\n/;
  }
  ;

  print $config_fh <<EOF

# NOTE: The first number in the LogFormat string refers to our internal LogFormat version.
# Whenever you make a change to LogFormat you should increment the version number.
LogFormat "2 %h %{Host}i %u %t %D %{UNIQUE_ID}e \\"%r\\" %{Destination}i %>s %b \\"%{Referer}i\\" \\"%{User-Agent}i\\"" limestone
CustomLog "$LOGS_DIR/access_log" limestone
ErrorLog "$LOGS_DIR/error_log"
PidFile "$LOGS_DIR/httpd.pid"

CoreDumpDirectory $LOGS_DIR

DAVLimestoneIndexCSS  http://www.$host_domain${port_part_of_host}/css/style.css
DAVDBMSTmpDir $TMP_DIR
DAVDBMSFileDir $FILES_DIR
# To allow depth: infinity PROPFINDs required by some clients.
DAVDepthInfinity on

<Location ${ROOT_PATH}>
  DAV repos
  ModMimeUsePathInfo on

  DAVUnauthenticatedAccess on
  DAVResponseRewriteCond Request-URI          /\\!lime/root.*
  DAVResponseRewriteRule (.*)                 /!lime/root\$1

  # work around the fact that the response rewrite system doesn't allow for multiple conditions for a rule. the next rule will undo this one.
  DAVResponseRewriteCond Host                 ^(drive\\.)?www\\.$host_domain.*
  DAVResponseRewriteRule (.*)                 /home/\$1

  # keep this tied to the one right above
  DAVResponseRewriteCond Host                 ^(drive\\.)?[^.]+\\.$host_domain.*
  DAVResponseRewriteRule ^/home/[^/]*/?(.*)   /\$1

  DAVResponseRewriteCond Host                           ^(drive\\.)?[^.]+\\.[^.]+\\.$host_domain.*
  DAVResponseRewriteRule ^/home/[^/]*/bits/[^/]*/?(.*)  /\$1

  AuthType Digest
  AuthName "users\@limebits.com"
  BrowserMatch ".*MSIE.*" AuthDigestEnableQueryStringHack=On

  AuthDigestProvider dbd

  Require valid-user

  #SQL query to verify a user
  #(note: DBD drivers recognise both stdio-like %s and native syntax)
  #Digest Authentication with mod_authn_dbd *requires* the query to have 2 parameters - user and realm.
  #We dont store the realm in database, hence the useless construct ' name != %s ' to dummify realm !
   AuthDBDUserRealmQuery "SELECT pwhash FROM principals INNER JOIN users ON principals.resource_id = users.principal_id WHERE name = %s and name != %s"


  # gzip content-encoding
  SetOutputFilter DEFLATE

 # Netscape 4.x has some problems...
  BrowserMatch ^Mozilla/4 gzip-only-text/html

 # Netscape 4.06-4.08 have some more problems
  BrowserMatch ^Mozilla/4\.0[678] no-gzip

 # MSIE masquerades as Netscape, but it is fine
  BrowserMatch \bMSIE !no-gzip !gzip-only-text/html
 # Don't compress images
  SetEnvIfNoCase Request_URI \.(?:gif|jpe?g|png)\$ no-gzip dont-vary

 # Make sure proxies don't deliver the wrong content
  Header append Vary User-Agent env=!dont-vary

</Location>

DeflateCompressionLevel 3

DeflateFilterNote Input instream
DeflateFilterNote Output outstream
DeflateFilterNote Ratio ratio

LogFormat '"\%r" \%{outstream}n/\%{instream}n (\%{ratio}n\%\%)' deflate
CustomLog $LOGS_DIR/deflate_log deflate


NameVirtualHost *:${vhost_port}
Listen ${listen_address}${vhost_port}

<VirtualHost *:${vhost_port}>
  ServerName ${host_domain}${port_part_of_host}
  Include ${VHOST_CONF_DIR_RELATIVE}/*.conf
</VirtualHost>
EOF
;
}

sub print_logrotate_config($) {
  my ($config_fh) = @_;

  print $config_fh <<EOF
${LOGS_DIR}/*log {
    weekly
    missingok
    compress
    delaycompress
    notifempty
    sharedscripts
    postrotate
        if [ -f stamps/apache-start ]; then
            ./aproot/bin/apachectl graceful
        fi
    endscript
}
EOF
;
}

sub rename_or_die($$) {
  my ($src, $dest) = @_;
  rename($src, $dest) or
    die("couldn't rename $src to $dest");
}

my @mysql_args = grep /mysql/, @ARGV;
my @pgsql_args = grep /pgsql/, @ARGV;

die "mysql no longer supported" if ($#mysql_args > -1);
die "Only pgsql is supported.  Please specify pgsql." if ($#pgsql_args < 0);
  

open(LIMESTONE_CONFIG, '>', $LIMESTONE_CONFIG) or die("couldn't open $LIMESTONE_CONFIG");

my $LSPORT = $ENV{'LIMESTONE_PGSQL_VHOST_PORT'};
my $DBHOST = $ENV{'LIMESTONE_PGSQL_DB_HOST'};
my $DBPORT = $ENV{'LIMESTONE_PGSQL_DB_PORT'};
my $DBNAME = $ENV{'LIMESTONE_PGSQL_DB_NAME'};
my $DBUSER = $ENV{'LIMESTONE_PGSQL_DB_USER'};
my $DBPASS = $ENV{'LIMESTONE_PGSQL_DB_PASS'};
print_limestone_config
  (*LIMESTONE_CONFIG, $LSPORT, "pgsql", $DBHOST, $DBPORT, 0, $DBNAME, $DBUSER, $DBPASS);

close(LIMESTONE_CONFIG) or die("couldn't close $LIMESTONE_CONFIG");

open(ORIG_HTTPD_CONFIG, $ORIG_HTTPD_CONFIG) or die("couldn't open $ORIG_HTTPD_CONFIG");
open(NEW_HTTPD_CONFIG, '>', $NEW_HTTPD_CONFIG) or die("couldn't open $NEW_HTTPD_CONFIG");
  
while (<ORIG_HTTPD_CONFIG>) {
  s/^Listen 80$/#Listen 80/;
  s|(CustomLog "logs/access_log" common$)|#$1|;

  if ($ENV{'HTTPD_USER'}) {
    s/(^User ).*/${1}$ENV{'HTTPD_USER'}/;
  }
  if ($ENV{'HTTPD_GROUP'}) {
    s/(^Group ).*/${1}$ENV{'HTTPD_GROUP'}/;
  }
  if ($ENV{'HTTPD_SERVERADMIN'}) {
    s/(^ServerAdmin ).*/${1}$ENV{'HTTPD_SERVERADMIN'}/;
  }

  print NEW_HTTPD_CONFIG;
}
print NEW_HTTPD_CONFIG "\nInclude ${NON_VHOST_CONF_DIR_RELATIVE}/*.conf\n";

close(ORIG_HTTPD_CONFIG) or die("couldn't close $ORIG_HTTPD_CONFIG");
close(NEW_HTTPD_CONFIG) or die("couldn't close $NEW_HTTPD_CONFIG");

open(LOGROTATE_CONFIG_NEW, '>', $LOGROTATE_CONFIG_NEW) or
  die("couldn't open $LOGROTATE_CONFIG_NEW");
print_logrotate_config(*LOGROTATE_CONFIG_NEW);
close(LOGROTATE_CONFIG_NEW);

rename_or_die($NEW_HTTPD_CONFIG, $HTTPD_CONFIG);
rename_or_die($LOGROTATE_CONFIG_NEW, $LOGROTATE_CONFIG);

exit 0;
    
